pipeline {
  agent any

  tools {
    jdk   'JDK_HOME'
    maven 'MAVEN_HOME'
    nodejs 'NODE_HOME' // NodeJS plugin â€“ adds node/npm to PATH
  }

  environment {
    TOMCAT_URL    = 'http://localhost:8080/manager/text'
    BACKEND_REPO  = 'https://github.com/Sekhar-Cse/crud-backend.git'
    FRONTEND_REPO = 'https://github.com/Sekhar-Cse/crud-frontend.git'

    BACKEND_DIR   = 'backend'
    FRONTEND_DIR  = 'frontend'

    BACKEND_WAR   = 'backend/target/springapp1.war'
    FRONTEND_WAR  = 'frontend/frontapp1.war'
  }

  stages {
    stage('Clone Repositories') {
      steps {
        dir("${env.BACKEND_DIR}")  { git branch: 'main', url: "${env.BACKEND_REPO}" }
        dir("${env.FRONTEND_DIR}") { git branch: 'main', url: "${env.FRONTEND_REPO}" }
      }
    }

    stage('Build React Frontend') {
      steps {
        dir("${env.FRONTEND_DIR}") {
          sh '''
            set -e
            npm ci || npm install
            npm run build
          '''
        }
      }
    }

    stage('Package React as WAR') {
      steps {
        script {
          def warDir = "${env.FRONTEND_DIR}/war_content"
          sh '''
            set -e
            warDir="'${warDir}'"   # keep Groovy out; we won't use this var below
          '''
          sh '''
            set -e
            WAR_DIR="${FRONTEND_DIR}/war_content"
            rm -rf "$WAR_DIR"
            mkdir -p "$WAR_DIR/META-INF" "$WAR_DIR/WEB-INF"

            # Support Vite (dist) or CRA (build)
            if   [ -d "${FRONTEND_DIR}/dist"  ]; then ASSETS_DIR="dist";
            elif [ -d "${FRONTEND_DIR}/build" ]; then ASSETS_DIR="build";
            else echo "No dist/ or build/ found"; exit 1; fi

            cp -R "${FRONTEND_DIR}/${ASSETS_DIR}/." "$WAR_DIR/"

            # Ensure target dir for WAR exists, then create WAR
            mkdir -p "$(dirname "$FRONTEND_WAR")"
            jar -cvf "$FRONTEND_WAR" -C "$WAR_DIR" .
          '''
        }
      }
    }

    stage('Build Spring Boot App') {
      steps {
        dir("${env.BACKEND_DIR}") {
          sh '''
            set -e
            mvn -B -DskipTests clean package
            if ls target/*.war >/dev/null 2>&1; then
              mv target/*.war target/springapp1.war
            fi
          '''
        }
      }
    }

    stage('Deploy Spring Boot WAR') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'TOMCAT_MANAGER',
                                          usernameVariable: 'TOMCAT_USER',
                                          passwordVariable: 'TOMCAT_PASS')]) {
          sh '''
            set -e
            curl -sS -u "$TOMCAT_USER:$TOMCAT_PASS" \
              --upload-file "$BACKEND_WAR" \
              "$TOMCAT_URL/deploy?path=/springapp1&update=true"
          '''
        }
      }
    }

    stage('Deploy Frontend WAR') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'TOMCAT_MANAGER',
                                          usernameVariable: 'TOMCAT_USER',
                                          passwordVariable: 'TOMCAT_PASS')]) {
          sh '''
            set -e
            curl -sS -u "$TOMCAT_USER:$TOMCAT_PASS" \
              --upload-file "$FRONTEND_WAR" \
              "$TOMCAT_URL/deploy?path=/frontapp1&update=true"
          '''
        }
      }
    }
  }
}

